import contextlib
import secrets

from cachetools import TTLCache

from password_admin.auth import LoginCredentials
from password_admin.database.factory import DatabaseFactory
from password_admin.database.interface import DatabaseInterface
from password_admin.exceptions import DatabaseError
from password_admin.exceptions import SessionNotFoundError
from password_admin.settings import settings


class SessionStore:
    """Manages database connections."""

    def __init__(self, database_factory: DatabaseFactory) -> None:
        self.__store: TTLCache[str, DatabaseInterface] = TTLCache(maxsize=settings.max_sessions, ttl=settings.session_duration_seconds)
        self._database_factory = database_factory

    def create_session(self, credentials: LoginCredentials) -> str | None:
        """Connects to database and stores connection under generated token.

        Args:
            credentials (LoginCredentials): Database credentials.

        Returns:
            str | None: Autogenerated token if connection was successful.

        Raises:
            DatabaseConnectionError: when connection was not possible.
            DatabaseLoginError: when credentials were invalid.
        """
        database_connection = self._database_factory.create()
        database_connection.login(credentials)
        token = self.__create_random_token()
        while token in self.__store:
            token = self.__create_random_token()
        self.__store[token] = database_connection
        return token

    def __create_random_token(self) -> str:
        return secrets.token_urlsafe(settings.token_length)

    def destroy_session(self, token: str) -> None:
        database_connection = self.__store.pop(token)
        if database_connection:
            with contextlib.suppress(DatabaseError):
                database_connection.logout()

    def get_database_connection(self, token: str) -> DatabaseInterface:
        try:
            return self.__store[token]
        except KeyError as e:
            raise SessionNotFoundError(token) from e
